import { OrderItem } from '../entities/orderItem'
import { GenericGateway } from './generic.gateway'

export interface OrderItemGateway1 {
  getById: (id: string) => Promise<OrderItem | undefined> // return undefined if ID not found or server error
  getAll: () => Promise<OrderItem[] | undefined> // return undefined if server error
  create: (entity: OrderItem) => Promise<OrderItem | undefined> // return undefined if server error, return entity with id if success. Entity can be posted with id (it will be retained) or without id (it will be generated by the store)
  deleteById: (id: string) => Promise<OrderItem | undefined> // return undefined if ID not found or if server error
  update: (id: string, partial: Partial<OrderItem>) => Promise<OrderItem | undefined> // return undefined if ID not found or server error
  getByProperty: (property: keyof OrderItem, value: any) => Promise<OrderItem[] | undefined> // return undefined if server error
  getByOrderId: (orderId: string) => Promise<OrderItem[] | undefined> // return undefined if server error
}

export interface OrderItemGateway2 extends GenericGateway<OrderItem> {
  getByProperty: (property: keyof OrderItem, value: any) => Promise<OrderItem[] | undefined> // return undefined if server error
  getByOrderId: (orderId: string) => Promise<OrderItem[] | undefined> // return undefined if server error
}
