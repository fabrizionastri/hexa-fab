import { Order } from '../entities/order'
import { GenericGateway } from './generic.gateway'

export interface OrderGateway1 {
  getById: (id: string) => Promise<Order | undefined> // return undefined if ID not found or server error
  getAll: () => Promise<Order[] | undefined> // return undefined if server error, return [] if no orders exist
  create: (entity: Order) => Promise<Order | undefined> // return undefined if server error, return entity with id if success. Entity can be posted with id (it will be retained) or without id (it will be generated by the store)
  deleteById: (id: string) => Promise<Order | undefined> // return undefined if ID not found or if server error
  update: (id: string, partialEntity: Partial<Order>) => Promise<Order | undefined> // return undefined if ID not found or server error
  getByProperty: (property: keyof Order, value: any) => Promise<Order[] | undefined> // return undefined if server error
  getForAccount: (accountId: string) => Promise<Order[] | undefined> // return undefined if server error
}

export interface OrderGateway2 extends GenericGateway<Order> {
  getByProperty: (property: keyof Order, value: any) => Promise<Order[] | undefined> // return undefined if server error
  getForAccount: (accountId: string) => Promise<Order[] | undefined> // return undefined if server error
}

export const OrderGateway3 = (orderStore: any | null | undefined, orderItemStore: any | null | undefined) => {
  if (!orderStore) throw new Error('No order adapter provided')
  if (!orderItemStore) throw new Error('No order items adapter provided')
  const items = (orderId: string | null | undefined) => orderItemStore.getAll(orderId)
  return {
    getAll: (): Order[] => {
      const orders = orderStore.getAll()
      return orders.map((order: Partial<Order>) => {
        return {
          ...order,
          orderItems: items(order.id),
        }
      })
    },
    getById: (orderId: string): Order => {
      const order = orderStore.getById(orderId)
      return {
        ...order,
        orderItems: items(order.id),
      }
    },
  }
}
