--- Folder Structure ---
project_structure_filter.ts
[src]
    ├── [adapters]
        ├── [controllers]
        └── [stores]
            ├── [inMemory]
                ├── inMemoryStore.spec.ts
                └── inMemoryStore.ts
            └── [jsonServer]
                ├── jsonServerStore.spec.ts
                └── jsonServerStore.ts
    ├── [config]
    ├── [core]
        ├── [entities]
            ├── order.ts
            ├── orderItem.ts
            └── store.ts
        ├── [gateways]
            ├── order.gateway.spec.ts
            ├── order.gateway.ts
            └── store.gateway.ts
        └── [usecases]
            ├── calculateOrder.ts
            ├── calculateOrderItem.ts
            ├── getAllOrdersWithItems.spec.ts
            ├── getAllOrdersWithItems.ts
            ├── getByProperty.spec.ts
            └── getByProperty.ts
    ├── server.ts
    ├── [utils]
        └── nanoid.ts
    └── [views]
        ├── layout.ejs
        ├── order-all.ejs
        └── order-detail.ejs
--- File Contents ---
--- File: src\core\gateways\order.gateway.spec.ts ---
import { orderGateway } from './order.gateway'
describe('orderGateway', () => {
  it('should return empty array if no orders', () => {
    expect(orderGateway()).toEqual([])
  })
})
--- File: src\core\gateways\order.gateway.ts ---
export const orderGateway = () => {
  return []
}
--- File: src\core\gateways\store.gateway.ts ---
import { JsonServerStore } from '../../adapters/stores/jsonServer/jsonServerStore'
import { Order } from '../entities/order'
import { OrderItem } from '../entities/orderItem'
import { Entity } from '../entities/store'
export type Store<T extends Entity> = {
  getById: (id: string) => Promise<T | undefined> // return undefined if ID not found or server error
  getAll: () => Promise<T[] | undefined> // return undefined if server error
  create: (entity: T) => Promise<T | undefined> // return undefined if server error, return entity with id if success. Entity can be posted with id (it will be retained) or without id (it will be generated by the store)
  deleteById: (id: string) => Promise<T | undefined> // return undefined if ID not found or if server error
  update: (partialEntity: Partial<T>) => Promise<T | undefined> // return undefined if ID not found or server error
}
export const orderStore = JsonServerStore<Order>('orders')
export const orderItemStore = JsonServerStore<OrderItem>('orderItems')
--- File: src\server.ts ---
// IMPORT MODULES
import express, { Express, Request, Response } from 'express'
import { orderStore } from './core/gateways/store.gateway'
import expressEjsLayouts from 'express-ejs-layouts'
import { calculateOrder } from './core/usecases/calculateOrder'
// SERVER SET UP
const expressPort = 3001
const expressUrl = `http://localhost:${expressPort}`
const app: Express = express()
app.set('view engine', 'ejs') // sets the default engine for EJS files, meaning that you can use res.render('fileName') instead of res.render('fileName', {extension: 'ejs'}).
app.use(expressEjsLayouts) // use express-ejs-layouts as the layout engine
// app.set('views', new URL('./views', import.meta.url).pathname)
// app.set('views', path.join(__dirname, '/views')) // set the default folder for ejs files. use the path.join to merge the path of the current direct(__dirname property) and 'views' folder into an absolute path
app.set('views', './src/views')
app.use(express.urlencoded({ extended: true })) // To parse incoming URL-encoded requests (form data in POST request body). Important : if you do not do this, you won't be able to get data from a POST request body
app.use(express.json()) // To parse incoming JSON requests. Important : if you do not do this, you won't be able to get data from a POST request body
// DATABASE SET UP
app.get('/', (_req: Request, res: Response) => {
  res.send(`⚡️Server is running at ${expressUrl}`)
})
app.get('/order', async (_req: Request, res: Response) => {
  const orders = await orderStore.getAll()
  // res.send(JSON.stringify(orders))
  res.render('order-all', { orders })
})
app.get('/order/:id', async (req, res) => {
  const id = req.params.id
  let order = await orderStore.getById(id)
  if (order) {
    order = await calculateOrder(order)
    res.render('order-detail', { order })
  }
  res.send('Order not found')
})
// SERVER LISTENING
app.use((_req: Request, res: Response) => {
  res.status(404).send('Page not found')
})
app.listen(expressPort, () => {
  console.log(`⚡️Server is running at ${expressUrl}`)
})
--- File: src\views\layout.ejs ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!-- this is to make the page compatible with older versions of IE -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- this is to make the page responsive -->
  <title>Hexa-Fab</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
    }

    th {
      background-color: #4CAF50;
      color: white;
    }

    body {
      font-family: Open-Sans, Helvetica, sans-serif;
    }
  </style>
</head>

<body>
  <main>
    <%- body %>
  </main>

  </script>
</body>

</html>
--- File: src\views\order-all.ejs ---
<h1>Order summary</h1>
<ul>
  <% orders.forEach(function(order) { %>
    <li>Order ID: <%= order.id %>
    </li>
    <li>Order name: <%= order.name %>
    </li>
    <br>
    <% }); %>
</ul>
--- File: src\views\order-detail.ejs ---
<h1>Order Detail</h1>

<ul>
  <li>Order ID: <%= order.id %>
  <li>Name: <%= order.name %>
  <li>Amount excluding tax: <%= order.withoutTaxAmount %> €
  <li>Tax: <%= order.taxAmount %> €
  <li>Amount including tax: <%= order.withTaxAmount %> €
</ul>

<h2>Order Items</h2>


<% order.orderItems.forEach(function(item) { %>
  <h4>Item ID: <%= item.id %>
  </h4>
  <ul>
    <li>Name: <%= item.name %>
    <li>Unit: <%= item.unit %>
    <li>Price: <%= item.price %>
    <li>Quantity: <%= item.quantity %>
    <li>Amount excluding tax: <%= item.withoutTaxAmount %> €
    <li>Tax: <%= item.taxAmount %> €
    <li>Amount including tax: <%= item.withTaxAmount %> €
  </ul>

  <% }); %>