--- Folder Structure ---
project_structure_filter.ts
[src]
    ├── [adapters]
        ├── [controllers]
        └── [stores]
            ├── [inMemory]
                ├── inMemoryStore.spec.ts
                └── inMemoryStore.ts
            └── [jsonServer]
                ├── jsonServerStore.spec.ts
                └── jsonServerStore.ts
    ├── [config]
    ├── [core]
        ├── [entities]
            ├── order.ts
            ├── orderItem.ts
            └── store.ts
        ├── [gateways]
            ├── order.gateway.spec.ts
            ├── order.gateway.ts
            └── store.gateway.ts
        └── [usecases]
            ├── getAllOrdersWithItems.spec.ts
            ├── getAllOrdersWithItems.ts
            ├── getByProperty.spec.ts
            ├── getByProperty.ts
            └── populate.ts
    ├── server.ts
    ├── [utils]
        └── nanoid.ts
    └── [views]
        ├── layout.ejs
        └── order.ejs
--- File Contents ---
--- File: src\adapters\stores\inMemory\inMemoryStore.spec.ts ---
import { mockStore } from '../../../../mock/db'
import { Order } from '../../../core/entities/order'
import { InMemoryStore } from './inMemoryStore'
let orders = mockStore.orders
let order4: Order = { id: 'order4', name: 'Bonnet', principal: 10 }
let order5: Order = { id: '', name: 'Manteau' }
describe('InMemoryStore', () => {
  describe('orders', () => {
    const orderStore = InMemoryStore<Order>('orders')
    describe('get', () => {
      it('return order for valid id', async () => {
        const order: Order | undefined = await orderStore.getById('order1')
        expect(order).toEqual(orders[0])
      })
      it('return undefined for inexistant id', async () => {
        const order: Order | undefined = await orderStore.getById('inexistant')
        expect(order).toEqual(undefined)
      })
    })
    describe('getAll', () => {
      it('return all orders when orders are present', async () => {
        const orders: Order[] | undefined = await orderStore.getAll()
        expect(orders).toEqual(orders)
      })
    })
    describe('create', () => {
      it('return order with same ID when posting order with ID', async () => {
        const result = await orderStore.create(order4)
        console.log('order4:', result)
        expect(result).toBeDefined()
        expect(result).toEqual(order4)
      })
      it('return order with new ID when posting order without valid ID', async () => {
        const result = await orderStore.create(order5)
        if (!result?.id) return undefined
        order5.id = result.id
        console.log('newOrder 5 result:', result)
        console.log('newOrder 5 newOrder:', order5)
        expect(result).toEqual(order5)
        if (order5.id) await orderStore.deleteById(order5.id)
      })
    })
    describe('update', () => {
      it('return updated order when posting order with valid ID ', async () => {
        const updatedValues: Order = {
          id: 'order4',
          name: 'Bonnet Bleu',
        }
        order4.name = updatedValues.name
        const result = await orderStore.update(updatedValues)
        console.log('order4 updated object:', order4)
        console.log('order4 updated result:', result)
        expect(result).toEqual(order4)
      })
      it('return order with new ID when posting order without ID', async () => {
        const result = await orderStore.update(order5)
        if (!result?.id) return undefined
        order5.id = result.id
        console.log('newOrder 5 result:', result)
        console.log('newOrder 5 newOrder:', order5)
        expect(result).toEqual(order5)
        if (order5.id) await orderStore.deleteById(order5.id)
      })
    })
    describe('deleteById', () => {
      it('return order when sucessfully deleting an order with a valid ID', async () => {
        const result = await orderStore.deleteById('order4')
        expect(result).toEqual(result)
      })
    })
  })
})
--- File: src\adapters\stores\inMemory\inMemoryStore.ts ---
import { Store } from './../../../core/gateways/store.gateway'
import { mockStore } from '../../../../mock/db'
import { Entity } from '../../../core/entities/store'
import { Order } from '../../../core/entities/order'
import { OrderItem } from '../../../core/entities/orderItem'
import { nanoid } from 'nanoid'

type MockStore = {
  orders: Order[]
  orderItems: OrderItem[]
}

export const InMemoryStore = <T extends Entity>(
  resource: keyof MockStore & string
): Store<T> => {
  // if ressource is not a property of object mockStore, throw error

  const keys = Object.keys(mockStore)
  if (!keys.includes(resource)) throw new Error('Resource not found')

  const store = mockStore[resource] as unknown as T[]

  return {
    getById: async (id: string): Promise<T | undefined> => {
      return store.find((entity: T) => entity.id === id)
    },
    getAll: async (): Promise<T[] | undefined> => {
      return store
    },
    create: async (entity: T): Promise<T | undefined> => {
      // if entity does not have an id, generate an unique id using nanoid
      if (!entity.id) entity.id = nanoid()
      // if this id already exists, replace it with a unique id using nanoid
      while (store.find((e: T) => e.id === entity.id)) {
        entity.id = nanoid()
      }
      store.push(entity)
      return entity
    },
    deleteById: async (id: string): Promise<T | undefined> => {
      // if the store does not contain an entity with this id, return undefined
      if (!store.find((entity: T) => entity.id === id)) return undefined
      // if the store contains an entity with this id, remove it and return the entity
      return store.splice(
        store.findIndex((entity: T) => entity.id === id),
        1
      )[0]
    },
    update: async (partialEntity: Partial<T>): Promise<T | undefined> => {
      // if (!('id' in partialEntity)) return undefined
      const id = partialEntity.id
      const index = store.findIndex((entity) => entity.id === id)
      if (index === -1) return undefined
      const existingEntity = store[index]
      // const updatedEntity = { ...store[index], ...partialEntity }
      const updatedEntity = Object.assign({
        ...existingEntity,
        ...partialEntity,
      })
      store[index] = updatedEntity
      return updatedEntity
    },
  }
}
--- File: src\adapters\stores\jsonServer\jsonServerStore.spec.ts ---
import { mockStore } from '../../../../mock/db'
import { Order } from '../../../core/entities/order'
import { resetJsonDB } from '../../../../mock/resetJsonDB'
import { JsonServerStore } from './jsonServerStore'
let orders = mockStore.orders
let order4: Order = { id: 'order4', name: 'Bonnet', principal: 10 }
let order5: Order = { id: '', name: 'Manteau' }
resetJsonDB()
describe('JsonServerStore', () => {
  beforeAll(() => {
    resetJsonDB()
  })
  describe('orders', () => {
    const orderStore = JsonServerStore<Order>('orders')
    describe('get', () => {
      it('return order for valid id', async () => {
        const order: Order | undefined = await orderStore.getById('order1')
        expect(order).toEqual(orders[0])
      })
      it('return undefined for inexistant id', async () => {
        const order: Order | undefined = await orderStore.getById('inexistant')
        expect(order).toEqual(undefined)
      })
    })
    describe('getAll', () => {
      it('return all orders when orders are present', async () => {
        const orders: Order[] | undefined = await orderStore.getAll()
        expect(orders).toEqual(orders)
      })
    })
    describe('create', () => {
      it('return order with same ID when posting order with ID', async () => {
        const result = await orderStore.create(order4)
        console.log('order4:', result)
        expect(result).toEqual(order4)
      })
      it('return order with new ID when posting order without valid ID', async () => {
        const result = await orderStore.create(order5)
        if (!result?.id) return undefined
        order5.id = result.id
        console.log('newOrder 5 result:', result)
        console.log('newOrder 5 newOrder:', order5)
        expect(result).toEqual(order5)
        if (order5.id) await orderStore.deleteById(order5.id)
      })
    })
    describe('update', () => {
      it('return updated order when posting order with valid ID ', async () => {
        const updatedValues: Order = {
          id: 'order4',
          name: 'Bonnet Bleu',
        }
        order4.name = updatedValues.name
        const result = await orderStore.update(updatedValues)
        console.log('order4 updated object:', order4)
        console.log('order4 updated result:', result)
        expect(result).toEqual(order4)
      })
      it('return order with new ID when posting order without ID', async () => {
        const result = await orderStore.update(order5)
        if (!result?.id) return undefined
        order5.id = result.id
        console.log('newOrder 5 result:', result)
        console.log('newOrder 5 newOrder:', order5)
        expect(result).toEqual(order5)
        if (order5.id) await orderStore.deleteById(order5.id)
      })
    })
    describe('deleteById', () => {
      it('return order when sucessfully deleting an order with a valid ID', async () => {
        const result = await orderStore.deleteById('order4')
        expect(result).toEqual(result)
      })
    })
  })
})
--- File: src\adapters\stores\jsonServer\jsonServerStore.ts ---
import axios, { AxiosResponse, Method } from 'axios'
import { Store } from '../../../core/gateways/store.gateway'
import { Entity } from '../../../core/entities/store'
const myAxios = axios.create({
  baseURL: 'http://localhost:3000/',
  timeout: 1000,
})
const handleRequest =
  (httpMethod: Method) =>
  async <T>(url: string, data?: any): Promise<T | undefined> => {
    try {
      const response: AxiosResponse = await myAxios.request({
        url,
        method: httpMethod,
        data,
      })
      return response.data
    } catch (error) {
      // console.error(error)
      return undefined
    }
  }
const $axios = {
  get: handleRequest('get'),
  post: handleRequest('post'),
  delete: handleRequest('delete'),
  put: handleRequest('put'),
}
export const JsonServerStore = <T extends Entity>(
  resource: string
): Store<T> => {
  return {
    getById: async (id: string): Promise<T | undefined> => {
      return $axios.get<T>(`/${resource}/${id}`)
    },
    getAll: async (): Promise<T[] | undefined> => {
      return $axios.get<T[]>(`/${resource}`)
    },
    create: async (entity: T): Promise<T | undefined> => {
      return await $axios.post<T>(`/${resource}`, entity)
    },
    deleteById: async (id: string): Promise<T | undefined> => {
      return await $axios.delete<T>(`/${resource}/${id}`)
    },
    update: async (partialEntity: Partial<T>): Promise<T | undefined> => {
      if (!('id' in partialEntity)) return undefined
      const id = partialEntity.id
      const existingEntity = await $axios.get<T>(`/${resource}/${id}`)
      const updatedEntity = Object.assign({
        ...existingEntity,
        ...partialEntity,
      })
      return await $axios.put<T>(`/${resource}/${id}`, updatedEntity)
    },
  }
}
--- File: src\core\entities\order.ts ---
import { OrderItem } from './orderItem'
export type Order  {
  id: string
  name: string
  orderItems?: OrderItem[]
  principal?: number
}
export const withoutTaxAmount = (items: OrderItem[]): number => {
  return items.reduce((acc, item) => acc + item.price * item.quantity, 0)
}
export const withTaxAmount = (items: OrderItem[]): number => {
  return items.reduce(
    (acc, item) => acc + item.price * item.quantity * (1 + item.tax),
    0
  )
}
export const taxAmount = (items: OrderItem[]): number => {
  return items.reduce(
    (acc, item) => acc + item.price * item.quantity * item.tax,
    0
  )
}
--- File: src\core\entities\orderItem.ts ---
export type OrderItem = {
  id: string
  orderId: string
  name: string
  unit: string
  quantity: number
  price: number
  tax: number
}
export const withoutTaxAmount = (item: OrderItem): number => {
  return item.price * item.quantity
}
export const withTaxAmount = (item: OrderItem): number => {
  return item.price * item.quantity * (1 + item.tax)
}
export const taxAmount = (item: OrderItem): number => {
  return item.price * item.quantity * item.tax
}
export const calculateOrderItems = (item: OrderItem): any => {
  return {
    ...item,
    withoutTaxAmount: withoutTaxAmount(item),
    withTaxAmount: withTaxAmount(item),
    taxAmount: taxAmount(item),
  }
}
--- File: src\core\entities\store.ts ---
export type Entity = {
  id: string
}
--- File: src\core\gateways\order.gateway.spec.ts ---
import { orderGateway } from './order.gateway'

describe('orderGateway', () => {
  it('should return empty array if no orders', () => {
    expect(orderGateway()).toEqual([])
  })
})
--- File: src\core\gateways\order.gateway.ts ---
export const orderGateway = () => {
  return []
}
--- File: src\core\gateways\store.gateway.ts ---
import { Entity } from '../entities/store'
export type Store<T extends Entity> = {
  getById: (id: string) => Promise<T | undefined> // return undefined if ID not found or server error
  getAll: () => Promise<T[] | undefined> // return undefined if server error
  create: (entity: T) => Promise<T | undefined> // return undefined if server error, return entity with id if success. Entity can be posted with id (it will be retained) or without id (it will be generated by the store)
  deleteById: (id: string) => Promise<T | undefined> // return undefined if ID not found or if server error
  update: (partialEntity: Partial<T>) => Promise<T | undefined> // return undefined if ID not found or server error
}
--- File: src\core\usecases\getByProperty.spec.ts ---
import { InMemoryStore } from '../../adapters/stores/inMemory/inMemoryStore'
import { JsonServerStore } from '../../adapters/stores/jsonServer/jsonServerStore'
// import { Order } from '../../core/entities/order'
import { OrderItem } from '../entities/orderItem'
import { getByProperty } from './getByProperty'

describe('getByProperty from Mock arrays', () => {
  let orderItemStore = InMemoryStore<OrderItem>('orderItems')
  it('return list of 2 childs of Order 1', async () => {
    // const orderInMemoryStore = ordersMock
    expect(await getByProperty('orderId', 'order1', orderItemStore)).toEqual(
      orderItemStore.slice(0, 2)
    )
  })
  it('return list of 1 child of Order 2', async () => {
    // const orderInMemoryStore = ordersMock
    expect(await getByProperty('orderId', 'order2', orderItemStore)).toEqual(
      orderItemStore.slice(2)
    )
  })
})

describe('getByProperty from Json Server', () => {
  let orderItemStore = JsonServerStore<OrderItem>('orderItems')
  it('return list of 2 childs of Order 1', async () => {
    expect(await getByProperty('orderId', 'order1', orderItemStore)).toEqual(
      orderItemStore.slice(0, 2)
    )
  })
  it('return list of 1 child of Order 2', async () => {
    expect(await getByProperty('orderId', 'order2', orderItemStore)).toEqual(
      orderItemStore.slice(2)
    )
  })
})
--- File: src\core\usecases\getByProperty.ts ---
// for a given parent object p, and a given entity type T, getChilds returns a Promise of an array of entities T, using the

import { Entity } from '../entities/store'
import { Store } from '../gateways/store.gateway'

export const getByProperty = async <T extends Entity>(
  property: keyof T,
  value: any,
  store: Store<T>
): Promise<T[]> => {
  const array = (await store.getAll()) as T[]
  return array.filter((item) => item[property] === value)
}
--- File: src\views\order.ejs ---
<!DOCTYPE html>
<html>

<head>
  <title>Order Details</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
    }

    th {
      background-color: #4CAF50;
      color: white;
    }
  </style>
</head>

<body>
  <h1>Order summary</h1>
  <ol>
    <li>Order ID: <%= order.id %>
    </li>
    <li>Order name: <%= order.name %>
    </li>
    <li>Order item: <%= order.orderItems %>
  </ol>

  <h2>Order Items</h2>
  <ol>
    <% order.orderItems.forEach(function(item) { %>
      <li>
        <%= item %>
      </li>
      <% }); %>
  </ol>

</body>

</html>